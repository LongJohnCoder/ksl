%{
--------------------------------------------------------------------------------
--
--  This file is part of the Doxyrest toolkit.
--
--  Doxyrest is distributed under the MIT license.
--  For details see accompanying license.txt file,
--  the public copy of which is also available at:
--  http://tibbo.com/downloads/archive/doxyrest/license.txt
--
--------------------------------------------------------------------------------

local argArray = table.pack (...)
local compound = argArray [1]

local indent
local variable

if compound.m_compoundKind == "namespace" or compound.m_compoundKind == "group" then
	indent = ""
	variable = "variable"
else
	indent = "\t"
	variable = "field"
end

for i = 1, #compound.m_groupArray do
	local item = compound.m_groupArray [i]
	local targetFileName = getItemFileName (item, ".dox")

	generateFile (targetFileName, "c_group.dox.in", item)
end

for i = 1, #compound.m_namespaceArray do
	local item = compound.m_namespaceArray [i]
	local targetFileName = getItemFileName (item, ".dox")

	generateFile (targetFileName, "c_namespace.dox.in", item)
end

for i = 1, #compound.m_enumArray do
	local item = compound.m_enumArray [i]
	local targetFileName = getItemFileName (item, ".dox")

	generateFile (targetFileName, "c_enum.dox.in", item)
end

for i = 1, #compound.m_structArray do
	local item = compound.m_structArray [i]
	local targetFileName = getItemFileName (item, ".dox")

	generateFile (targetFileName, "c_class.dox.in", item)
end

for i = 1, #compound.m_unionArray do
	local item = compound.m_unionArray [i]
	local targetFileName = getItemFileName (item, ".dox")

	generateFile (targetFileName, "c_class.dox.in", item)
end

for i = 1, #compound.m_classArray do
	local item = compound.m_classArray [i]
	local targetFileName = getItemFileName (item, ".dox")

	generateFile (targetFileName, "c_class.dox.in", item)
end

for i = 1, #compound.m_typedefArray do
	local item = compound.m_typedefArray [i]
}
$(indent)\typedef $(getItemName (item))

$(indent)	Detailed description for typedef ``$(getItemName (item))``

%{
end -- for

for i = 1, #compound.m_variableArray do
	local item = compound.m_variableArray [i]
}
$(indent)\$(variable) $(getItemName (item))

$(indent)	Detailed description for $(variable) ``$(getItemName (item))``

%{
end -- for

for i = 1, #compound.m_propertyArray do
	local item = compound.m_propertyArray [i]
}
$(indent)\property $(getItemName (item))

$(indent)	Detailed description for property ``$(getItemName (item))``

%{
end -- for

for i = 1, #compound.m_eventArray do
	local item = compound.m_eventArray [i]
}
$(indent)\event $(getItemName (item))

$(indent)	Detailed description for event ``$(getItemName (item))``

%{
	end -- for

for i = 1, #compound.m_functionArray do
	local item = compound.m_functionArray [i]
}
$(indent)\fn $(getItemName (item))

$(indent)	Detailed description for function ``$(getItemName (item))``

%{
end -- for

for i = 1, #compound.m_aliasArray do
	local item = compound.m_aliasArray [i]
}
$(indent)\alias $(getItemName (item))

$(indent)	Detailed description for alias ``$(getItemName (item))``

%{
end -- for

for i = 1, #compound.m_defineArray do
	local item = compound.m_defineArray [i]
}
$(indent)\define $(item.m_name))

$(indent)	Detailed description for macro ``$(item.m_name)``

%{
end -- for
}
